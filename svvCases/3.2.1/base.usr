c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e
c     e = gllel(eg)
      
      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

c      ux   = 0.0
c      uy   = 0.0
c      uz   = 0.0
c      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg
      
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      real rcen(5,5)

      e = gllel(eg)

      theta = 0. !(45./180.)*PI

      ucx = 0.5*cos(theta)-0.5*sin(theta)
      ucy = 0.5*sin(theta)+0.5*cos(theta)

      ux = (PI)*(ucy-ym1(ix,iy,iz,e))
      uy = (PI)*(xm1(ix,iy,iz,e)-ucx)
      uz = 0.0

      if(ifield .eq. 2)then
         x1 = 0.5
         y1 = 0.75
         rcen(1,1) = x1*cos(theta)-0.5*sin(theta)
         rcen(1,2) = 0.5*sin(theta)+y1*cos(theta)
         
         temp = sqrt((xm1(ix,iy,iz,e)-rcen(1,1))**2.
     &        +(ym1(ix,iy,iz,e)-rcen(1,2))**2.)-0.15

         if(temp.le.0.)then
            temp = 1.
         else
            temp = 0.
         endif

         x = xm1(ix,iy,iz,e)
         y = ym1(ix,iy,iz,e)

         x1 = 0.5
         y1 = 0.85
         xlim = x1*cos(theta)-0.5*sin(theta)
         ylim = 0.5*sin(theta)+y1*cos(theta)
         
         if(abs(x-xlim) .lt. 0.05/2. .and. y .lt. ylim)then
            temp = 0.
         endif
      else
         temp = 0.0
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none
      
      include 'SIZE'
      include 'TOTAL'
      include 'SVV'
     
      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelv
      
      svvcut = (lx1-1)/2.0
      iburgers = 0
      ifnlsvv = .true.
      ifsvv = .true.

      svv_c0 = 1.0
      svv_k1 = 1.5
      svv_k0 = 1.5
      
c     Soln Monitor
      tmin = glmin(t(1,1,1,1,1),ntot)
      tmax = glmax(t(1,1,1,1,1),ntot)
      if (nid.eq.0) write(6,1) istep,time,tmin,tmax
  1   format(i9,1p3e14.6,' tmax')

c      if (istep.eq.0) call outpost(vx,vy,vz,pr,t(1,1,1,1,2),'sln')
c      if (istep.eq.nsteps) call outpost(vx,vy,vz,pr,t(1,1,1,1,2),'sln')
      
      return
      end
c---------------------------------------------------------------------      
      subroutine userqtl        ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      ntot = nx1*ny1*nz1*nelt
      theta = 0. !(45./180.)*PI
      
      do i=1,ntot
         x= xm1(i,1,1,1)
         y = ym1(i,1,1,1) !+(1./200.)*sin(x*2.*PI*10.)

         xm1(i,1,1,1) = x*cos(theta)-y*sin(theta)
         ym1(i,1,1,1) = x*sin(theta)+y*cos(theta)
         
      enddo
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      ifflow = .false.
      ifheat = .true.

      return
      end
c---------------------------------------------------------------------
